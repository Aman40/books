#!/usr/bin/node
const express = require('express');
const app = express();
const books = require('./mod_books');
const login = require('./mod_loginout');
const signup = require('./mod_signup');
const session = require('express-session');
const MySqlStore = require('express-mysql-session');
const util = require('util');

/*Connection options for the session store. I'm using my already existing mysql "books"
database for sessions. The same database holds all app info. Oops! I said too much!*/
const store_options = {
host: 'localhost',
port: 3306,
user: 'aman',
password: 'password',
database: 'books',
};
let sessionStore = new MySqlStore(store_options);
const session_options = {
cookie: {
path: '/',
httpOnly: false,
secure: false,
maxAge: 20601000,
},
resave: true, //Reset maxAge counter
rolling: true, //Session only expires if user is inactive for duration of maxAge
secret: 'sms-iwaly',
store: sessionStore,
unset: 'destroy',
saveUninitialized: true,
};
app.use('/', (req, res, next)=>{
  /*Answer the pre-flight request for access control*/
  res.setHeader("Access-Control-Allow-Origin","http://localhost:3000");
  res.setHeader("Access-Control-Allow-Credentials",true);
  res.setHeader("Access-Control-Allow-Methods","GET, HEAD, OPTIONS, POST, PUT");
  res.setHeader("Access-Control-Allow-Headers","Cookie, Set-Cookie, Access-Control-Allow-Headers, " +
  "Origin, Accept, X-Requested-With, Content-Type, Access-Control-Request-Method," +
  "Access-Control-Request-Headers");
  res.setHeader("Content-Type","text/html");
  if(req.method!=="OPTIONS") {
    next();
  } else {
    res.end('ok');
  }
});
//Route the request for /favicon.ico here before sessions begin
app.use(function (req, res, next) {
/*The client browser couldn't allow setting the "cookie" header, so it's sent over via
the "Set-Cookie" header and passed to the "cookie" header here on the server. Also,
it's sent back via the xml tags, extracted and added to the
document.cookie using javascript. All this is just for the development version and
is necessary because the client is issued by the React dev server violating the SOP
*/
  if(req.headers['set-cookie']) {
    req.headers.cookie = req.headers['set-cookie'][0];
  }
  next();
});

app.use(session(session_options));
app.use('/',send_session_data);
app.listen(8000);

function send_session_data(req, res){
  if(req.session.uid) {
    let usr_data = {}; //Stringify and send to user.
    usr_data.alias = req.session.alias;
    usr_data.uid = req.session.uid;
    usr_data.sex = req.session.sex;
    usr_data.dob = req.session.dob;
    usr_data.pref = req.session.pref;
    usr_data.email = req.session.email;
    usr_data.about = req.session.about;
    usr_data.student = req.session.student;
    usr_data.school = req.session.school;
    //Copy a part of the session data and echo it back to the user.
    //Return JSON string of names and values to be parsed into an obj
    res.statusCode = 200;
    res.write(`<usr_info>${JSON.stringify(usr_data)}</usr_info>`);
    res.end("<srv_res_status>0</srv_res_status>");
  } else {
    res.write("<msg>You are not logged in.</msg>");
    res.write(`<cookie>${res.getHeader('Set-Cookie')}</cookie>`)
    res.statusCode = 200;
    res.end("<srv_res_status>1</srv_res_status>"); //OK
  }
}
