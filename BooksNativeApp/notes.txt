Parcel:
	A data structure designed for sharing data between processes.
There are up to 6 different classes for reading and writing primitive data types
to parcels.
	There's also a plethora of methods for writing arrays of primitives to parcels.

USING LOCATION
The purpose of this is to show the closest items to the user first
1. 	The user's location is not necessary. It will be obtained or requested 
	(for browsers) real time to display the closest items. 
	
	If a student, the user's school's zip code is taken. This willl be used 
	as a fallback for items' location when not provided.

BOOKS LOCATION
1. 	The default is the user's University

IMPLEMENTATION:
1. Remove "New". They're all old by default. If new, User should specifically describe
	in "Condition"

DELIVERY:
1. Have a common room (like IRIS in Osaka University) where the givers bring books for
	completed transactions and the receivers can pick them up from there. 
	When the givers bring the books, they also bring proof of confirmed transaction to
	avoid people dumping their books there. The transaction confirmation should be 
	in form of a QR code containing the giver's id, receiver's id, date of confirmation,
	date of pickup, bookID. The confirmer scans the QR code, checking the transaction 
	database for the transaction's existence.
	The receiver has their own QR code to confirm their identity. This should also
	include time of generation to guard against identity spoofing.
	How about having BSP members volunteer as agents. Receiving and giving.
2. 

CREATING CUSTOM NATIVE COMPONENTS
A native module is a Java class 
The class must extend ReactContextBaseJavaModule class.
It implements the functionality required by JavaScript. (What you want the module to do)
The super class requires implementing a function called getName()
getName() returns a string that's the name of the module.
The other implementation is getConstants() that exposes constants to JavaScript;
The latter is not required
To expose a method to JavaScript, a method must be annotated with @ReactMethod
The last step within Java is to register the module.
This happens in the createNativeModules() of your app's package.